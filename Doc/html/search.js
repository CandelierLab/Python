window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "AE", "modulename": "AE", "kind": "module", "doc": "<p>Hello !</p>\n"}, {"fullname": "AE.Network", "modulename": "AE.Network", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "AE.Network.ANN", "modulename": "AE.Network.ANN", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "AE.Network.ANN.activate", "modulename": "AE.Network.ANN", "qualname": "activate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">afun</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AE.Network.ANN.ANN", "modulename": "AE.Network.ANN", "qualname": "ANN", "kind": "class", "doc": "<p>Generic Neuronal Network</p>\n\n<p>Base class for all the Neural Networks of the <code>AE.NN</code> package.\nThis class does not perform any processing and is intended to be subclassed.</p>\n\n<p>Subclasses should have the following methods:</p>\n\n<ul>\n<li><code>add_node()</code>: Adding nodes</li>\n<li><code>add_link()</code>: Adding links</li>\n<li><code>process()</code>: Processing inputs to generate outputs.</li>\n</ul>\n\n<p>It is also recommended to have an <code>initialize()</code> method to compile the \nnetwork and improve ease of coding and speed of exection.</p>\n\n<p>Nodes should have the fields:</p>\n\n<ul>\n<li><code>IN</code></li>\n<li><code>OUT</code></li>\n<li><code>name</code></li>\n</ul>\n\n<p>Attributes:\n  Node ([dict]): All the nodes, including input, hidden and output nodes.\n  W (np.Array): Weights matrix. Each element \\( w_{ij} \\) contains the weight of the \n    link \\( i \\rightarrow j \\).\n  IN ([int]): Indices of the input nodes.\n  OUT ([int]): Indices of the output nodes.\n  verbose (<em>boolean</em>): If True, informative messages are displayed.</p>\n", "bases": "AE.Network.Network.Network"}, {"fullname": "AE.Network.ANN.ANN.__init__", "modulename": "AE.Network.ANN", "qualname": "ANN.__init__", "kind": "function", "doc": "<p>Generic network constructor</p>\n\n<p>Args:\n  verbose (boolean): If True, informative messages are displayed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">default_activation</span><span class=\"o\">=</span><span class=\"s1\">&#39;sigmoid&#39;</span>, </span><span class=\"param\"><span class=\"n\">propagation_mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;synchronous&#39;</span></span>)</span>"}, {"fullname": "AE.Network.ANN.ANN.default_activation", "modulename": "AE.Network.ANN", "qualname": "ANN.default_activation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.ANN.ANN.propagation_mode", "modulename": "AE.Network.ANN", "qualname": "ANN.propagation_mode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.ANN.ANN.BULK", "modulename": "AE.Network.ANN", "qualname": "ANN.BULK", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.ANN.ANN.nNd", "modulename": "AE.Network.ANN", "qualname": "ANN.nNd", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.ANN.ANN.nIn", "modulename": "AE.Network.ANN", "qualname": "ANN.nIn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.ANN.ANN.nBk", "modulename": "AE.Network.ANN", "qualname": "ANN.nBk", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.ANN.ANN.add_node", "modulename": "AE.Network.ANN", "qualname": "ANN.add_node", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">IN</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">OUT</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">initial_value</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">html</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AE.Network.ANN.ANN.add_edge", "modulename": "AE.Network.ANN", "qualname": "ANN.add_edge", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">i</span>, </span><span class=\"param\"><span class=\"n\">j</span>, </span><span class=\"param\"><span class=\"n\">w</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>, </span><span class=\"param\"><span class=\"n\">d</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AE.Network.ANN.ANN.initialize", "modulename": "AE.Network.ANN", "qualname": "ANN.initialize", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AE.Network.ANN.ANN.process", "modulename": "AE.Network.ANN", "qualname": "ANN.process", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AE.Network.ANN.ANN.step", "modulename": "AE.Network.ANN", "qualname": "ANN.step", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AE.Network.Comparison", "modulename": "AE.Network.Comparison", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Comparison.compare", "modulename": "AE.Network.Comparison", "qualname": "compare", "kind": "function", "doc": "<p>Comparison of two networks.</p>\n\n<p>The algorithm is identical to [1] but with the addition of a constraint\nof edge weight similarity. Set weight_constraint=False to recover the \noriginal algorithm.</p>\n\n<p>[1] L.A. Zager and G.C. Verghese, \"Graph similarity scoring and matching\",\n    Applied Mathematics Letters 21 (2008) 86\u201394, doi: 10.1016/j.aml.2007.01.006</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">NetA</span>, </span><span class=\"param\"><span class=\"n\">NetB</span>, </span><span class=\"param\"><span class=\"n\">weight_constraint</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">nIter</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AE.Network.Comparison.matching", "modulename": "AE.Network.Comparison", "qualname": "matching", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">NetA</span>, </span><span class=\"param\"><span class=\"n\">NetB</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AE.Network.Comparison.MatchNet", "modulename": "AE.Network.Comparison", "qualname": "MatchNet", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Comparison.MatchNet.__init__", "modulename": "AE.Network.Comparison", "qualname": "MatchNet.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">NetA</span>, </span><span class=\"param\"><span class=\"n\">NetB</span>, </span><span class=\"param\"><span class=\"n\">M</span></span>)</span>"}, {"fullname": "AE.Network.Comparison.MatchNet.NetA", "modulename": "AE.Network.Comparison", "qualname": "MatchNet.NetA", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Comparison.MatchNet.NetB", "modulename": "AE.Network.Comparison", "qualname": "MatchNet.NetB", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Comparison.MatchNet.mn", "modulename": "AE.Network.Comparison", "qualname": "MatchNet.mn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Comparison.MatchNet.unA", "modulename": "AE.Network.Comparison", "qualname": "MatchNet.unA", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Comparison.MatchNet.unB", "modulename": "AE.Network.Comparison", "qualname": "MatchNet.unB", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Comparison.MatchNet.me", "modulename": "AE.Network.Comparison", "qualname": "MatchNet.me", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Comparison.MatchNet.ueA", "modulename": "AE.Network.Comparison", "qualname": "MatchNet.ueA", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Comparison.MatchNet.ueB", "modulename": "AE.Network.Comparison", "qualname": "MatchNet.ueB", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Comparison.MatchNet.rmn", "modulename": "AE.Network.Comparison", "qualname": "MatchNet.rmn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Comparison.MatchNet.rme", "modulename": "AE.Network.Comparison", "qualname": "MatchNet.rme", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Comparison.MatchNet.amewd", "modulename": "AE.Network.Comparison", "qualname": "MatchNet.amewd", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Comparison.MatchNet.print", "modulename": "AE.Network.Comparison", "qualname": "MatchNet.print", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AE.Network.Network", "modulename": "AE.Network.Network", "kind": "module", "doc": "<p>Generic neural network tools</p>\n\n<p>The class <code>.Network</code> is a generic class for Neural Networks of the \n<code>AE.NN</code> package. It does not perform any processing though, so it\nhas to be subclassed to be useful.</p>\n"}, {"fullname": "AE.Network.Network.Network", "modulename": "AE.Network.Network", "qualname": "Network", "kind": "class", "doc": "<p>Generic Neuronal Network</p>\n\n<p>Base class for all the Neural Networks of the <code>AE.NN</code> package.\nThis class does not perform any processing and is intended to be subclassed.</p>\n\n<p>Subclasses should have the following methods:</p>\n\n<ul>\n<li><code>add_node()</code>: Adding nodes</li>\n<li><code>add_link()</code>: Adding links</li>\n<li><code>process()</code>: Processing inputs to generate outputs.</li>\n</ul>\n\n<p>It is also recommended to have an <code>initialize()</code> method to compile the \nnetwork and improve ease of coding and speed of exection.</p>\n\n<p>Nodes should have the fields:</p>\n\n<ul>\n<li><code>IN</code></li>\n<li><code>OUT</code></li>\n<li><code>name</code></li>\n</ul>\n\n<p>Attributes:\n  Node ([dict]): All the nodes, including input, hidden and output nodes.\n  W (np.Array): Weights matrix. Each element \\( w_{ij} \\) contains the weight of the \n    link \\( i \\rightarrow j \\).\n  IN ([int]): Indices of the input nodes.\n  OUT ([int]): Indices of the output nodes.\n  verbose (<em>boolean</em>): If True, informative messages are displayed.</p>\n"}, {"fullname": "AE.Network.Network.Network.__init__", "modulename": "AE.Network.Network", "qualname": "Network.__init__", "kind": "function", "doc": "<p>Generic network constructor</p>\n\n<p>Args:\n  verbose (boolean): If True, informative messages are displayed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "AE.Network.Network.Network.node", "modulename": "AE.Network.Network", "qualname": "Network.node", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Network.Network.edge", "modulename": "AE.Network.Network", "qualname": "Network.edge", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Network.Network.IN", "modulename": "AE.Network.Network", "qualname": "Network.IN", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Network.Network.OUT", "modulename": "AE.Network.Network", "qualname": "Network.OUT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Network.Network.nodeRadius", "modulename": "AE.Network.Network", "qualname": "Network.nodeRadius", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Network.Network.nodeFontSize", "modulename": "AE.Network.Network", "qualname": "Network.nodeFontSize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Network.Network.edgeFontSize", "modulename": "AE.Network.Network", "qualname": "Network.edgeFontSize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Network.Network.nodeColor", "modulename": "AE.Network.Network", "qualname": "Network.nodeColor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Network.Network.nodeTextColor", "modulename": "AE.Network.Network", "qualname": "Network.nodeTextColor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Network.Network.nodeStroke", "modulename": "AE.Network.Network", "qualname": "Network.nodeStroke", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Network.Network.IOnodeStroke", "modulename": "AE.Network.Network", "qualname": "Network.IOnodeStroke", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Network.Network.edgeColor", "modulename": "AE.Network.Network", "qualname": "Network.edgeColor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Network.Network.verbose", "modulename": "AE.Network.Network", "qualname": "Network.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Network.Network.print", "modulename": "AE.Network.Network", "qualname": "Network.print", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AE.Network.Network.Network.show", "modulename": "AE.Network.Network", "qualname": "Network.show", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">isolate_output</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">viewHeight</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AE.Network.Visu_2d", "modulename": "AE.Network.Visu_2d", "kind": "module", "doc": "<p>Generic neural network tools</p>\n\n<p>The class <code>.Network</code> is a generic class for Neural Networks of the \n<code>AE.NN</code> package. It does not perform any processing though, so it\nhas to be subclassed to be useful.</p>\n"}, {"fullname": "AE.Network.Visu_2d.Visu2d", "modulename": "AE.Network.Visu_2d", "qualname": "Visu2d", "kind": "class", "doc": "<p>2D network visualisation and animation tool</p>\n\n<p>Generates a 2D representation of a network. As it derives from\n<code>AE.Display.Animation.Animation2d</code>, it can also be used to \nimplement animations, like color-changing nodes to represent their\nvalues through time.</p>\n", "bases": "AE.Display.Animation.Animation_2d.Animation_2d"}, {"fullname": "AE.Network.Visu_2d.Visu2d.__init__", "modulename": "AE.Network.Visu_2d", "qualname": "Visu2d.__init__", "kind": "function", "doc": "<p>Network 2D visualization constructor</p>\n\n<p>Each node and link is converted to an <code>AE.Display.Animation.element</code>.</p>\n\n<p>It also defines all the necessary attributes for animations.</p>\n\n<p>Args:\n  Net (<code>Network</code>): Network to visualize.\n  dt (float): Animation time increment (s) between two updates.\n  disp_time (bool): If true, the animation time is overlaid to the animation.\n  window (<code>.Window</code>): If not None, a simple window containing the \n    visualization.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Net</span>, </span><span class=\"param\"><span class=\"n\">isolate_output</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">viewHeight</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "AE.Network.Visu_2d.Visu2d.Net", "modulename": "AE.Network.Visu_2d", "qualname": "Visu2d.Net", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Visu_2d.Visu2d.isolate_output", "modulename": "AE.Network.Visu_2d", "qualname": "Visu2d.isolate_output", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Visu_2d.Visu2d.r", "modulename": "AE.Network.Visu_2d", "qualname": "Visu2d.r", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Visu_2d.Visu2d.nodeFontSize", "modulename": "AE.Network.Visu_2d", "qualname": "Visu2d.nodeFontSize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Network.Visu_2d.Visu2d.change", "modulename": "AE.Network.Visu_2d", "qualname": "Visu2d.change", "kind": "function", "doc": "<p>Drag callback</p>\n\n<p>Reimplements <code>AE.Display.Animation.Animation2d.change()</code>.</p>\n\n<p>args:</p>\n\n<p>type (str): type of change (<code>move</code>).</p>\n\n<p>elm (<code>AE.Display.Animation.element</code>): Element that has changed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">type</span>, </span><span class=\"param\"><span class=\"n\">item</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AE.Display", "modulename": "AE.Display", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "AE.Display.Colormap", "modulename": "AE.Display.Colormap", "kind": "module", "doc": "<p>Colormaps tools</p>\n"}, {"fullname": "AE.Display.Colormap.Colormap", "modulename": "AE.Display.Colormap", "qualname": "Colormap", "kind": "class", "doc": "<p>A class to manage colormaps\nIt is mainly used to convert scaler values to colors.</p>\n"}, {"fullname": "AE.Display.Colormap.Colormap.__init__", "modulename": "AE.Display.Colormap", "qualname": "Colormap.__init__", "kind": "function", "doc": "<p><code>Colormap</code> constructor</p>\n\n<p>Defines the basic attributes of a colormap, namely the number of colors \n<code>ncolors</code> and value range <code>range</code>.</p>\n\n<p>The name of the colormap is either provided to the constructor or set \nlater on with the <code>set</code> method.</p>\n\n<p>Args:\n  name (string): The name of the colormap. All the names from Matplotlib \n    are accepted. Default: 'turbo'\n  range (list): The range of the colormap. Default: [0,1]\n  ncolors (int): The number of colors in the colormap. Default: 64</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;turbo&#39;</span>, </span><span class=\"param\"><span class=\"nb\">range</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">ncolors</span><span class=\"o\">=</span><span class=\"mi\">64</span></span>)</span>"}, {"fullname": "AE.Display.Colormap.Colormap.ncolors", "modulename": "AE.Display.Colormap", "qualname": "Colormap.ncolors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Display.Colormap.Colormap.norm", "modulename": "AE.Display.Colormap", "qualname": "Colormap.norm", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Display.Colormap.Colormap.range", "modulename": "AE.Display.Colormap", "qualname": "Colormap.range", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Display.Colormap.Colormap.cmap", "modulename": "AE.Display.Colormap", "qualname": "Colormap.cmap", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "AE.Display.Colormap.Colormap.set", "modulename": "AE.Display.Colormap", "qualname": "Colormap.set", "kind": "function", "doc": "<p>Set colormap's name.</p>\n\n<p>Args:\n  name (string): The name of the colormap, to be chosen among all valid \n    colormap names in Matplotlib. The default colormap is 'turbo'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AE.Display.Colormap.Colormap.qcolor", "modulename": "AE.Display.Colormap", "qualname": "Colormap.qcolor", "kind": "function", "doc": "<p>Convert a scalar value in a Qt color (QColor).</p>\n\n<p>Args:\n  value (float): A value in <code>range</code> that determines the desired color.\n    If <code>value</code> is not <code>range</code>, the closest value in the range is used.</p>\n\n<p>Returns:\n  Color (QColor): The QColor object corresponding to <code>value</code>in the colormap.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">scaled</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AE.Display.Colormap.Colormap.htmlcolor", "modulename": "AE.Display.Colormap", "qualname": "Colormap.htmlcolor", "kind": "function", "doc": "<p>Convert a scalar value in an html color (string).</p>\n\n<p>Args:\n  value (float): A value in <code>range</code> that determines the desired color.\n    If <code>value</code> is not <code>range</code>, the closest value in the range is used.</p>\n\n<p>Returns:\n  Color (string): A html string corresponding to <code>value</code>in the colormap.\n    The output string is formated as 'rgb(x,y,z)'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">scaled</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "AE.Display.time", "modulename": "AE.Display.time", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "AE.Display.time.time", "modulename": "AE.Display.time", "qualname": "time", "kind": "class", "doc": "<p>A class to manage time, especially the duality between steps and\ncontinuous time.</p>\n"}, {"fullname": "AE.Display.time.time.__init__", "modulename": "AE.Display.time", "qualname": "time.__init__", "kind": "function", "doc": "<p><code>time</code> constructor</p>\n\n<p>Defines a time aobject that contains both a stepwise and continuous representation.</p>\n\n<p>Args:\n  step (int): The current time step\n  time (float): The current time.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">step</span>, </span><span class=\"param\"><span class=\"n\">time</span></span>)</span>"}, {"fullname": "AE.Display.time.time.step", "modulename": "AE.Display.time", "qualname": "time.step", "kind": "variable", "doc": "<p>The current time step.</p>\n"}, {"fullname": "AE.Display.time.time.time", "modulename": "AE.Display.time", "qualname": "time.time", "kind": "variable", "doc": "<p>The current time (continuous).</p>\n"}, {"fullname": "Animation", "modulename": "Animation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Animation.Animation_2d", "modulename": "Animation.Animation_2d", "kind": "module", "doc": "<p>Simple tools for displaying 2D animations</p>\n\n<h2 id=\"animation2d\">Animation2d</h2>\n\n<p>The <code>Animation2d</code> wraps a  <code>QGraphicsView</code> and <code>QGraphicsScene</code>\nas well as all necessary tools for display (scene limits, antialiasing, etc.)\nGroups of elements can be formed for easier manipulation, and user interaction \nis possible (drag, click, etc.). It contains a timer triggering the \n<code>Animation2d.update()</code> method at a regular pace. In subclasses, this \nallows to change elements' positions or features (color, size, etc.) to create\nanimations.</p>\n\n<h2 id=\"items\">Items</h2>\n\n<p>The items are the elements displayed in the scene (<em>e.g.</em> circles, lines, ...).\nThey derive both from the generic class <code>item</code> and from their corresponding \n<code>QGraphicsItem</code>. They are incorporaeted in the animation <em>via</em> \n<code>Animation2d.add()</code>.</p>\n\n<h2 id=\"simple-animation-window\">Simple animation window</h2>\n\n<p>The <code>Window</code> class creates a simple window containing the \n<code>Animation2d.Qview()</code> widget. It manages the <code>QApplication</code>, size \non screen, shortcuts and timer trig. If an <code>Animation2d</code> object is\ncreated without parent (<code>QWidget</code> or <code>Window</code>), the default \n<code>Window</code> is automatically created.</p>\n"}, {"fullname": "Animation.Animation_2d.view", "modulename": "Animation.Animation_2d", "qualname": "view", "kind": "class", "doc": "<p>QGraphicsView(parent: Optional[QWidget] = None)\nQGraphicsView(scene: Optional[QGraphicsScene], parent: Optional[QWidget] = None)</p>\n", "bases": "PyQt5.QtWidgets.QGraphicsView"}, {"fullname": "Animation.Animation_2d.view.__init__", "modulename": "Animation.Animation_2d", "qualname": "view.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">scene</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Animation.Animation_2d.view.padding", "modulename": "Animation.Animation_2d", "qualname": "view.padding", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Animation_2d.view.fit", "modulename": "Animation.Animation_2d", "qualname": "view.fit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Animation_2d.view.showEvent", "modulename": "Animation.Animation_2d", "qualname": "view.showEvent", "kind": "function", "doc": "<p>showEvent(self, event: Optional[QShowEvent])</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">E</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Animation_2d.view.resizeEvent", "modulename": "Animation.Animation_2d", "qualname": "view.resizeEvent", "kind": "function", "doc": "<p>resizeEvent(self, event: Optional[QResizeEvent])</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">E</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Animation_2d.Animation_2d", "modulename": "Animation.Animation_2d", "qualname": "Animation_2d", "kind": "class", "doc": "<p>2D Animation</p>\n\n<p>Base class for two-dimensional animations.</p>\n\n<p>The <code>Animation2d.Qview</code> attribute is a <code>QGraphicsView</code> and can thus\nbe used directly as a QWidget in any Qt application. For rapid display, the\ncompanion class <code>Window</code> allows to easily create a new window for\nthe animation.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<h6 id=\"two-times-are-at-play-in-an-animation-the-display-time-whose\">Two times are at play in an animation: the <em>display</em> time, whose</h6>\n\n<p>increments are approximately the inverse of the <code>Animation2d.fps</code>\nattribute, and the <em>animation</em> time, which is a virtual quantity unrelated \nto the actual time. This way, slow motion or fast-forward animations can\nbe displayed. The <code>Animation2d.dt</code> attibute controls the increment\nof animation time between two display updates.</p>\n\n</div>\n\n<p>Attributes:</p>\n\n<p>item ({<code>item</code> <em>subclass</em>}): All items in the scene.</p>\n\n<p>boundaries ({'x', 'y', 'width', 'height'}): Limits of the scene.</p>\n\n<p>margin (float): Margin around the scene (pix).</p>\n\n<p>timeHeight (float): Position of the time display relative to the top of the\n    scene (pix).</p>\n\n<p>fps (float): Display framerate (1/s). Default is 25.</p>\n\n<p>t (float): Current animation time (s).</p>\n\n<p>dt (float): Animation time increment (s) between two updates.</p>\n\n<p>disp_time (bool): If true, the animation time is overlaid to the animation.</p>\n\n<p>disp_boundaries (bool): If true, a thin grey rectanle is overlaid to \n    indicate the boundaries.</p>\n\n<p>parent (<code>QWidget</code> or <code>Window</code>): If not None (default), a simple\n    window containing the animation is created.</p>\n\n<p>Qscene (<code>QGraphicsScene</code>): <code>QGraphicsScene</code> containing the elements.</p>\n\n<p>Qview (<code>QGraphicsView</code>): <code>QGraphicsView</code> widget representing the scene.</p>\n\n<p>timer (<code>QElapsedTimer</code>): Timer storing the display time since the \n    animation start.</p>\n\n<p>Qtimer (<code>QTimer</code>): Timer managing the display updates.</p>\n", "bases": "PyQt5.QtCore.QObject"}, {"fullname": "Animation.Animation_2d.Animation_2d.__init__", "modulename": "Animation.Animation_2d", "qualname": "Animation_2d.__init__", "kind": "function", "doc": "<p>Animation constructor</p>\n\n<p>Defines all the attributes of the animation, especially the <code>QGraphicsScene</code>\nand <code>QGraphicsView</code> necessary for rendering.</p>\n\n<p>Args:</p>\n\n<p>viewHeight (float): Height of the <code>QGraphicsView</code>.</p>\n\n<p>boundaries ([[float,float],[float,float]]): Limits of the scene to display.\n    The first element sets the <em>x</em>-limits and the second the <em>y</em>-limits. \n    Default is [[0,1],[0,1]].</p>\n\n<p>disp_boundaries (bool): If true, a thin grey rectanle is overlaid to \n    indicate the boundaries.</p>\n\n<p>disp_time (bool): If true, the animation time is overlaid to the animation.</p>\n\n<p>dt (float): Animation time increment (s) between two updates. Default: 0.04.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">viewHeight</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">boundaries</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">disp_boundaries</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">boundaries_color</span><span class=\"o\">=</span><span class=\"mi\">6</span></span>)</span>"}, {"fullname": "Animation.Animation_2d.Animation_2d.updated", "modulename": "Animation.Animation_2d", "qualname": "Animation_2d.updated", "kind": "function", "doc": "<p>pyqtSignal(*types, name: str = ..., revision: int = ..., arguments: Sequence = ...) -> PYQT_SIGNAL</p>\n\n<p>types is normally a sequence of individual types.  Each type is either a\ntype object or a string that is the name of a C++ type.  Alternatively\neach type could itself be a sequence of types each describing a different\noverloaded signal.\nname is the optional C++ name of the signal.  If it is not specified then\nthe name of the class attribute that is bound to the signal is used.\nrevision is the optional revision of the signal that is exported to QML.\nIf it is not specified then 0 is used.\narguments is the optional sequence of the names of the signal's arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Animation_2d.Animation_2d.viewHeight", "modulename": "Animation.Animation_2d", "qualname": "Animation_2d.viewHeight", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Animation_2d.Animation_2d.boundaries", "modulename": "Animation.Animation_2d", "qualname": "Animation_2d.boundaries", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Animation_2d.Animation_2d.factor", "modulename": "Animation.Animation_2d", "qualname": "Animation_2d.factor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Animation_2d.Animation_2d.scene", "modulename": "Animation.Animation_2d", "qualname": "Animation_2d.scene", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Animation_2d.Animation_2d.view", "modulename": "Animation.Animation_2d", "qualname": "Animation_2d.view", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Animation_2d.Animation_2d.disp_boundaries", "modulename": "Animation.Animation_2d", "qualname": "Animation_2d.disp_boundaries", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Animation_2d.Animation_2d.item", "modulename": "Animation.Animation_2d", "qualname": "Animation_2d.item", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Animation_2d.Animation_2d.composite", "modulename": "Animation.Animation_2d", "qualname": "Animation_2d.composite", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Animation_2d.Animation_2d.stack", "modulename": "Animation.Animation_2d", "qualname": "Animation_2d.stack", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Animation_2d.Animation_2d.add", "modulename": "Animation.Animation_2d", "qualname": "Animation_2d.add", "kind": "function", "doc": "<p>Add an item to the scene.</p>\n\n<p>args:\n  item (<code>item</code> <em>subclass</em>): The item to add.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">type</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Animation_2d.Animation_2d.setPadding", "modulename": "Animation.Animation_2d", "qualname": "Animation_2d.setPadding", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">padding</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Animation_2d.Animation_2d.update", "modulename": "Animation.Animation_2d", "qualname": "Animation_2d.update", "kind": "function", "doc": "<p>Update animation state</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Animation_2d.Animation_2d.receive", "modulename": "Animation.Animation_2d", "qualname": "Animation_2d.receive", "kind": "function", "doc": "<p>Event reception</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Animation_2d.Animation_2d.change", "modulename": "Animation.Animation_2d", "qualname": "Animation_2d.change", "kind": "function", "doc": "<p>Change notification</p>\n\n<p>This method is triggered whenever an item is changed.\nIt does nothing and has to be reimplemented in subclasses.</p>\n\n<p>.. Note::\n  To catch motion an item has to be declared as <code>movable</code>,\n  which is not the default.</p>\n\n<p>args:\n  type (str): Type of change (<code>move</code>).\n  item (<code>item</code> <em>subclass</em>): The changed item.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">type</span>, </span><span class=\"param\"><span class=\"n\">item</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Composites_2d", "modulename": "Animation.Composites_2d", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.composite", "modulename": "Animation.Composites_2d", "qualname": "composite", "kind": "class", "doc": "<p>Composite element</p>\n\n<p>A composite element defines a group item containing other items.</p>\n"}, {"fullname": "Animation.Composites_2d.composite.__init__", "modulename": "Animation.Composites_2d", "qualname": "composite.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">animation</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Animation.Composites_2d.composite.animation", "modulename": "Animation.Composites_2d", "qualname": "composite.animation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.composite.name", "modulename": "Animation.Composites_2d", "qualname": "composite.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.composite.position", "modulename": "Animation.Composites_2d", "qualname": "composite.position", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.arrow", "modulename": "Animation.Composites_2d", "qualname": "arrow", "kind": "class", "doc": "<p>Arrow composite element</p>\n", "bases": "composite"}, {"fullname": "Animation.Composites_2d.arrow.__init__", "modulename": "Animation.Composites_2d", "qualname": "arrow.__init__", "kind": "function", "doc": "<p>Arrow element constructor</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">animation</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Animation.Composites_2d.arrow.fontsize", "modulename": "Animation.Composites_2d", "qualname": "arrow.fontsize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.arrow.line", "modulename": "Animation.Composites_2d", "qualname": "arrow.line", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.arrow.head", "modulename": "Animation.Composites_2d", "qualname": "arrow.head", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.arrow.text", "modulename": "Animation.Composites_2d", "qualname": "arrow.text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.arrow.size", "modulename": "Animation.Composites_2d", "qualname": "arrow.size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.arrow.shape", "modulename": "Animation.Composites_2d", "qualname": "arrow.shape", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.arrow.color", "modulename": "Animation.Composites_2d", "qualname": "arrow.color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.arrow.points", "modulename": "Animation.Composites_2d", "qualname": "arrow.points", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.arrow.locus", "modulename": "Animation.Composites_2d", "qualname": "arrow.locus", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.arrow.pos_ahat", "modulename": "Animation.Composites_2d", "qualname": "arrow.pos_ahat", "kind": "function", "doc": "<p>Set arrowhead and text positions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Composites_2d.arrow.thickness", "modulename": "Animation.Composites_2d", "qualname": "arrow.thickness", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.arrow.zvalue", "modulename": "Animation.Composites_2d", "qualname": "arrow.zvalue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.arrow.string", "modulename": "Animation.Composites_2d", "qualname": "arrow.string", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.colorbar", "modulename": "Animation.Composites_2d", "qualname": "colorbar", "kind": "class", "doc": "<p>Colorbar composite element</p>\n", "bases": "composite"}, {"fullname": "Animation.Composites_2d.colorbar.__init__", "modulename": "Animation.Composites_2d", "qualname": "colorbar.__init__", "kind": "function", "doc": "<p>Colorbar constructor</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">animation</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Animation.Composites_2d.colorbar.cm", "modulename": "Animation.Composites_2d", "qualname": "colorbar.cm", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.colorbar.width", "modulename": "Animation.Composites_2d", "qualname": "colorbar.width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.colorbar.height", "modulename": "Animation.Composites_2d", "qualname": "colorbar.height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.colorbar.nticks", "modulename": "Animation.Composites_2d", "qualname": "colorbar.nticks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.colorbar.precision", "modulename": "Animation.Composites_2d", "qualname": "colorbar.precision", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Composites_2d.colorbar.rect", "modulename": "Animation.Composites_2d", "qualname": "colorbar.rect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Information", "modulename": "Animation.Information", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Animation.Information.Information", "modulename": "Animation.Information", "qualname": "Information", "kind": "class", "doc": "<p>2D Animation</p>\n\n<p>Base class for two-dimensional animations.</p>\n\n<p>The <code>Animation2d.Qview</code> attribute is a <code>QGraphicsView</code> and can thus\nbe used directly as a QWidget in any Qt application. For rapid display, the\ncompanion class <code>Window</code> allows to easily create a new window for\nthe animation.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<h6 id=\"two-times-are-at-play-in-an-animation-the-display-time-whose\">Two times are at play in an animation: the <em>display</em> time, whose</h6>\n\n<p>increments are approximately the inverse of the <code>Animation2d.fps</code>\nattribute, and the <em>animation</em> time, which is a virtual quantity unrelated \nto the actual time. This way, slow motion or fast-forward animations can\nbe displayed. The <code>Animation2d.dt</code> attibute controls the increment\nof animation time between two display updates.</p>\n\n</div>\n\n<p>Attributes:</p>\n\n<p>item ({<code>item</code> <em>subclass</em>}): All items in the scene.</p>\n\n<p>boundaries ({'x', 'y', 'width', 'height'}): Limits of the scene.</p>\n\n<p>margin (float): Margin around the scene (pix).</p>\n\n<p>timeHeight (float): Position of the time display relative to the top of the\n    scene (pix).</p>\n\n<p>fps (float): Display framerate (1/s). Default is 25.</p>\n\n<p>t (float): Current animation time (s).</p>\n\n<p>dt (float): Animation time increment (s) between two updates.</p>\n\n<p>disp_time (bool): If true, the animation time is overlaid to the animation.</p>\n\n<p>disp_boundaries (bool): If true, a thin grey rectanle is overlaid to \n    indicate the boundaries.</p>\n\n<p>parent (<code>QWidget</code> or <code>Window</code>): If not None (default), a simple\n    window containing the animation is created.</p>\n\n<p>Qscene (<code>QGraphicsScene</code>): <code>QGraphicsScene</code> containing the elements.</p>\n\n<p>Qview (<code>QGraphicsView</code>): <code>QGraphicsView</code> widget representing the scene.</p>\n\n<p>timer (<code>QElapsedTimer</code>): Timer storing the display time since the \n    animation start.</p>\n\n<p>Qtimer (<code>QTimer</code>): Timer managing the display updates.</p>\n", "bases": "AE.Display.Animation.Animation_2d.Animation_2d"}, {"fullname": "Animation.Information.Information.__init__", "modulename": "Animation.Information", "qualname": "Information.__init__", "kind": "function", "doc": "<p>Animation constructor</p>\n\n<p>Defines all the attributes of the animation, especially the <code>QGraphicsScene</code>\nand <code>QGraphicsView</code> necessary for rendering.</p>\n\n<p>Args:</p>\n\n<p>viewHeight (float): Height of the <code>QGraphicsView</code>.</p>\n\n<p>boundaries ([[float,float],[float,float]]): Limits of the scene to display.\n    The first element sets the <em>x</em>-limits and the second the <em>y</em>-limits. \n    Default is [[0,1],[0,1]].</p>\n\n<p>disp_boundaries (bool): If true, a thin grey rectanle is overlaid to \n    indicate the boundaries.</p>\n\n<p>disp_time (bool): If true, the animation time is overlaid to the animation.</p>\n\n<p>dt (float): Animation time increment (s) between two updates. Default: 0.04.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">disp_time</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "Animation.Information.Information.disp_time", "modulename": "Animation.Information", "qualname": "Information.disp_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Information.Information.time_str", "modulename": "Animation.Information", "qualname": "Information.time_str", "kind": "function", "doc": "<p>Format time string for display</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">t</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Information.Information.update", "modulename": "Animation.Information", "qualname": "Information.update", "kind": "function", "doc": "<p>Update animation state</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">t</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d", "modulename": "Animation.Items_2d", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.item", "modulename": "Animation.Items_2d", "qualname": "item", "kind": "class", "doc": "<p>Item of the animation (generic class)</p>\n\n<p>Items are the elements displayed in the <code>Animation2d.Qscene</code>. \nThis class provides a common constructor, conversions of positions\nto scene coordinates and styling of <code>QAbstractGraphicsShapeItem</code> \nchildren.</p>\n\n<p>Attr:</p>\n\n<p>animation (<code>Animation2d</code>): Parent animation.</p>\n\n<p>name (str): Unique identifier of the item.</p>\n\n<p>parent (<code>item</code> <em>subclass</em>): Parent item, if any.</p>\n\n<p>position ([float, float]): Position of the item. See each subclass for\n    details.</p>\n\n<p>zvalue (float): Z-value (stack order).</p>\n"}, {"fullname": "Animation.Items_2d.item.__init__", "modulename": "Animation.Items_2d", "qualname": "item.__init__", "kind": "function", "doc": "<p>Generic item constructor</p>\n\n<p>Args:</p>\n\n<p>animation (<code>Animaton2d</code>): The animation container.</p>\n\n<p>name (str): Name of the item. It should be unique, as it is used as an\n    identifier in the <code>Animation2d.item</code> dict.</p>\n\n<p>parent (<em>QGraphicsItem</em>): The parent <code>QGraphicsItem</code>.</p>\n\n<p>zvalue (float): Z-value (stack order).</p>\n\n<p>position ([float, float]): Position of the item. See each item's \n    documentation for a description.</p>\n\n<p>draggable (bool): If True, the element will be draggable. (default: <code>False</code>)</p>\n\n<p>clickable (bool): <em>TO DO</em></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">animation</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Animation.Items_2d.item.animation", "modulename": "Animation.Items_2d", "qualname": "item.animation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.item.name", "modulename": "Animation.Items_2d", "qualname": "item.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.item.x2scene", "modulename": "Animation.Items_2d", "qualname": "item.x2scene", "kind": "function", "doc": "<p>Convert the \\( x \\) position in scene coordinates</p>\n\n<p>arg:\n  x (float): The \\( x \\) position.</p>\n\n<p>returns:\n  The \\( x \\) position in scene coordinates.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.item.y2scene", "modulename": "Animation.Items_2d", "qualname": "item.y2scene", "kind": "function", "doc": "<p>Convert the \\( y \\) position in scene coordinates</p>\n\n<p>arg:\n  y (float): The \\( y \\) position.</p>\n\n<p>returns:\n  The \\( y \\) position in scene coordinates.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.item.xy2scene", "modulename": "Animation.Items_2d", "qualname": "item.xy2scene", "kind": "function", "doc": "<p>Convert the \\( x \\) and \\( y \\) positions in scene coordinates</p>\n\n<p>arg:\n  xy ([float,float]): The \\( x \\) and \\( y \\) positions.</p>\n\n<p>returns:\n  The \\( x \\) and \\( y \\) position in scene coordinates.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">xy</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.item.d2scene", "modulename": "Animation.Items_2d", "qualname": "item.d2scene", "kind": "function", "doc": "<p>Convert a distance in scene coordinates</p>\n\n<p>arg:\n  d (float): Distance to convert.</p>\n\n<p>returns:\n  The distance in scene coordinates.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">d</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.item.a2scene", "modulename": "Animation.Items_2d", "qualname": "item.a2scene", "kind": "function", "doc": "<p>Convert an angle in scene coordinates (radian to degrees)</p>\n\n<p>arg:\n  a (float): Angle to convert.</p>\n\n<p>returns:\n  The angle in degrees.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">a</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.item.scene2x", "modulename": "Animation.Items_2d", "qualname": "item.scene2x", "kind": "function", "doc": "<p>Convert horizontal scene coordinates into \\( x \\) position</p>\n\n<p>arg:\n  u (float): The horizontal coordinate.</p>\n\n<p>returns:\n  The \\( x \\) position.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">u</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.item.scene2y", "modulename": "Animation.Items_2d", "qualname": "item.scene2y", "kind": "function", "doc": "<p>Convert vertical scene coordinates into \\( y \\) position</p>\n\n<p>arg:\n  v (float): The horizontal coordinate.</p>\n\n<p>returns:\n  The \\( y \\) position.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.item.scene2xy", "modulename": "Animation.Items_2d", "qualname": "item.scene2xy", "kind": "function", "doc": "<p>Convert scene coordinates into \\( x \\) and \\( y \\) positions</p>\n\n<p>arg:\n  pos ([float,float]): The position in scene coordinates.</p>\n\n<p>returns:\n  The \\( x \\) and \\( y \\) positions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.item.scene2d", "modulename": "Animation.Items_2d", "qualname": "item.scene2d", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">d</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.item.width", "modulename": "Animation.Items_2d", "qualname": "item.width", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.item.height", "modulename": "Animation.Items_2d", "qualname": "item.height", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.item.place", "modulename": "Animation.Items_2d", "qualname": "item.place", "kind": "function", "doc": "<p>Absolute positionning</p>\n\n<p>Places the item at an absolute position.</p>\n\n<p>Attributes:\n  x (float): \\( x \\)-coordinate of the new position. It can also be a \n    doublet [<code>x</code>,<code>y</code>], in this case the <em>y</em> argument is \n    overridden.\n  y (float): \\( y \\)-coordinate of the new position.\n  z (float): A complex number \\( z = x+jy \\). Specifying <code>z</code>\n    overrides the <code>x</code> and <code>y</code> arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.item.move", "modulename": "Animation.Items_2d", "qualname": "item.move", "kind": "function", "doc": "<p>Relative displacement</p>\n\n<p>Displaces the item of relative amounts.</p>\n\n<p>Attributes:\n  dx (float): \\( x \\)-coordinate of the displacement. It can also be a \n    doublet [<code>dx</code>,<code>dy</code>], in this case the <em>dy</em> argument is overridden.\n  dy (float): \\( y \\)-coordinate of the displacement.\n  z (float): A complex number \\( z = dx+jdy \\). Specifying <code>z</code>\n    overrides the <code>x</code> and <code>y</code> arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dx</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">dy</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">z</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.item.rotate", "modulename": "Animation.Items_2d", "qualname": "item.rotate", "kind": "function", "doc": "<p>Relative rotation</p>\n\n<p>Rotates the item relatively to its current orientation.</p>\n\n<p>Attributes:\n  angle (float): Orientational increment (rad)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">angle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.item.setStyle", "modulename": "Animation.Items_2d", "qualname": "item.setStyle", "kind": "function", "doc": "<p>Item styling</p>\n\n<p>This function does not take any argument, instead it applies the changes\ndefined by each item's styling attributes (<em>e.g.</em> color, stroke thickness).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.item.mousePressEvent", "modulename": "Animation.Items_2d", "qualname": "item.mousePressEvent", "kind": "function", "doc": "<p>Simple click event</p>\n\n<p>For internal use only.</p>\n\n<p>args:\n  event (QGraphicsSceneMouseEvent): The click event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.item.mouseDoubleClickEvent", "modulename": "Animation.Items_2d", "qualname": "item.mouseDoubleClickEvent", "kind": "function", "doc": "<p>Double click event</p>\n\n<p>For internal use only.</p>\n\n<p>args:\n  event (QGraphicsSceneMouseEvent): The double click event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.item.itemChange", "modulename": "Animation.Items_2d", "qualname": "item.itemChange", "kind": "function", "doc": "<p>Item change notification</p>\n\n<p>This method is triggered upon item change. The item's transformation\nmatrix has changed either because setTransform is called, or one of the\ntransformation properties is changed. This notification is sent if the \n<code>ItemSendsGeometryChanges</code> flag is enabled (e.g. when an item is \n<code>item.movable</code>), and after the item's local transformation \nmatrix has changed.</p>\n\n<p>args:</p>\n\n<p>change (QGraphicsItem constant):</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">change</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.item.parent", "modulename": "Animation.Items_2d", "qualname": "item.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.item.behindParent", "modulename": "Animation.Items_2d", "qualname": "item.behindParent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.item.position", "modulename": "Animation.Items_2d", "qualname": "item.position", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.item.transformPoint", "modulename": "Animation.Items_2d", "qualname": "item.transformPoint", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.item.orientation", "modulename": "Animation.Items_2d", "qualname": "item.orientation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.item.scale", "modulename": "Animation.Items_2d", "qualname": "item.scale", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.item.zvalue", "modulename": "Animation.Items_2d", "qualname": "item.zvalue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.item.draggable", "modulename": "Animation.Items_2d", "qualname": "item.draggable", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.group", "modulename": "Animation.Items_2d", "qualname": "group", "kind": "class", "doc": "<p>Group item</p>\n\n<p>A group item has no representation upon display but serves as a parent for\nmultiple other items in order to create and manipulate composed objects.</p>\n", "bases": "item, PyQt5.QtWidgets.QGraphicsItemGroup"}, {"fullname": "Animation.Items_2d.group.__init__", "modulename": "Animation.Items_2d", "qualname": "group.__init__", "kind": "function", "doc": "<p>Group item constructor</p>\n\n<p>Defines a group, which inherits both from <code>QGraphicsItemGroup</code> and\n<code>item</code>.</p>\n\n<p>Args:</p>\n\n<p>animation (<code>Animaton2d</code>): The animation container.</p>\n\n<p>name (str): The item's identifier, which should be unique. It is used as a\n    reference by <code>Animation2d</code>. This is the only mandatory argument.</p>\n\n<p>parent (<em>QGraphicsItem</em>): The parent <code>QGraphicsItem</code> in the <code>QGraphicsScene</code>.\n    Default is <code>None</code>, which means the parent is the <code>QGraphicsScene</code> itself.</p>\n\n<p>zvalue (float): Z-value (stack order) of the item.</p>\n\n<p>position ([float,float]): Position of the <code>group</code>, <code>text</code>, \n    <code>circle</code>, and <code>rectangle</code> elements (scene units).</p>\n\n<p>orientation (float): Orientation of the item (rad)</p>\n\n<p>clickable (bool): <em>TO DO</em></p>\n\n<p>movable (bool): If True, the element will be draggable. (default: <code>False</code>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">animation</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Animation.Items_2d.text", "modulename": "Animation.Items_2d", "qualname": "text", "kind": "class", "doc": "<p>Text item</p>\n\n<p>The ellipse is defined by it's <code>ellipse.major</code> and <code>ellipse.minor</code>\naxis lenghts, and by its position and orientation. The position of the \ncenter is set by <code>item.position</code> and the orientation ... <em>TO WRITE</em>.</p>\n\n<p>Attributes:</p>\n\n<p>major (float): Length of the major axis.</p>\n\n<p>minor (float): Length of the minor axis.</p>\n", "bases": "item, PyQt5.QtWidgets.QGraphicsTextItem"}, {"fullname": "Animation.Items_2d.text.__init__", "modulename": "Animation.Items_2d", "qualname": "text.__init__", "kind": "function", "doc": "<p>Text item constructor</p>\n\n<p>Defines a textbox, which inherits both from <code>QGraphicsEllipseItem</code> and\n<code>item</code>.</p>\n\n<p>Args:</p>\n\n<p>animation (<code>Animaton2d</code>): The animation container.</p>\n\n<p>name (str): The item's identifier, which should be unique. It is used as a\n    reference by <code>Animation2d</code>. This is the only mandatory argument.</p>\n\n<p>parent (<em>QGraphicsItem</em>): The parent <code>QGraphicsItem</code> in the <code>QGraphicsScene</code>.\n    Default is <code>None</code>, which means the parent is the <code>QGraphicsScene</code> itself.</p>\n\n<p>zvalue (float): Z-value (stack order) of the item.</p>\n\n<p>orientation (float): Orientation of the item (rad)</p>\n\n<p>position ([float,float]): Position of the <code>group</code>, <code>text</code>, \n    <code>circle</code>, and <code>rectangle</code> elements (scene units).</p>\n\n<p>colors ([<em>color</em>, <em>color</em>]): Fill and stroke colors for <code>circle</code>, \n    <code>ellipse</code>, <code>rectangle</code> or <code>polygon</code> elements.  Colors can be \n    whatever input of <code>QColor</code> (<em>e.g</em>: <code>darkCyan</code>, <code>#ff112233</code> or \n    (255, 0, 0, 127))</p>\n\n<p>linestyle (str): Stroke style (for <code>circle</code>, <code>ellipse</code>, <code>rectangle</code>\n    or ``p <br />\n  clickable (bool): <em>TO DO</em></p>\n\n<p>movable (bool): If True, the element will be draggable. (default: <code>False</code>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">animation</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Animation.Items_2d.text.string", "modulename": "Animation.Items_2d", "qualname": "text.string", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.text.color", "modulename": "Animation.Items_2d", "qualname": "text.color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.text.fontname", "modulename": "Animation.Items_2d", "qualname": "text.fontname", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.text.fontsize", "modulename": "Animation.Items_2d", "qualname": "text.fontsize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.text.center", "modulename": "Animation.Items_2d", "qualname": "text.center", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.ellipse", "modulename": "Animation.Items_2d", "qualname": "ellipse", "kind": "class", "doc": "<p>Ellipse item</p>\n\n<p>The ellipse is defined by it's <code>ellipse.major</code> and <code>ellipse.minor</code>\naxis lenghts, and by its position and orientation. The position of the \ncenter is set by <code>item.position</code> and the orientation ... <em>TO WRITE</em>.</p>\n\n<p>Attributes:</p>\n\n<p>major (float): Length of the major axis.</p>\n\n<p>minor (float): Length of the minor axis.</p>\n", "bases": "item, PyQt5.QtWidgets.QGraphicsEllipseItem"}, {"fullname": "Animation.Items_2d.ellipse.__init__", "modulename": "Animation.Items_2d", "qualname": "ellipse.__init__", "kind": "function", "doc": "<p>Ellipse item constructor</p>\n\n<p>Defines an ellipse, which inherits both from <code>QGraphicsEllipseItem</code> and\n<code>item</code>.</p>\n\n<p>Args:</p>\n\n<p>animation (<code>Animaton2d</code>): The animation container.</p>\n\n<p>name (str): The item's identifier, which should be unique. It is used as a\n    reference by <code>Animation2d</code>. This is the only mandatory argument.</p>\n\n<p>parent (<em>QGraphicsItem</em>): The parent <code>QGraphicsItem</code> in the <code>QGraphicsScene</code>.\n    Default is <code>None</code>, which means the parent is the <code>QGraphicsScene</code> itself.</p>\n\n<p>zvalue (float): Z-value (stack order) of the item.</p>\n\n<p>orientation (float): Orientation of the item (rad)</p>\n\n<p>position ([float,float]): Position of the <code>group</code>, <code>text</code>, \n    <code>circle</code>, and <code>rectangle</code> elements (scene units).</p>\n\n<p>colors ([<em>color</em>, <em>color</em>]): Fill and stroke colors for <code>circle</code>, \n    <code>ellipse</code>, <code>rectangle</code> or <code>polygon</code> elements.  Colors can be \n    whatever input of <code>QColor</code> (<em>e.g</em>: <code>darkCyan</code>, <code>#ff112233</code> or \n    (255, 0, 0, 127))</p>\n\n<p>linestyle (str): Stroke style (for <code>circle</code>, <code>ellipse</code>, <code>rectangle</code>\n    or <code>polygon</code>). Can have any value among <code>solid</code> (default), <code>dash</code>\n    or <code>--</code>, <code>dot</code> or <code>..</code> or <code>:</code>, <code>dashdot</code> or <code>-.</code>.</p>\n\n<p>clickable (bool): <em>TO DO</em></p>\n\n<p>movable (bool): If True, the element will be draggable. (default: <code>False</code>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">animation</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Animation.Items_2d.ellipse.colors", "modulename": "Animation.Items_2d", "qualname": "ellipse.colors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.ellipse.linestyle", "modulename": "Animation.Items_2d", "qualname": "ellipse.linestyle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.ellipse.thickness", "modulename": "Animation.Items_2d", "qualname": "ellipse.thickness", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.ellipse.span", "modulename": "Animation.Items_2d", "qualname": "ellipse.span", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.ellipse.major", "modulename": "Animation.Items_2d", "qualname": "ellipse.major", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.ellipse.minor", "modulename": "Animation.Items_2d", "qualname": "ellipse.minor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.circle", "modulename": "Animation.Items_2d", "qualname": "circle", "kind": "class", "doc": "<p>Circle item</p>\n\n<p>The ellipse is defined by it's <code>ellipse.major</code> and <code>ellipse.minor</code>\naxis lenghts, and by its position and orientation. The position of the \ncenter is set by <code>item.position</code> and the orientation ... <em>TO WRITE</em>.</p>\n\n<p>Attributes:</p>\n\n<p>major (float): Length of the major axis.</p>\n\n<p>minor (float): Length of the minor axis.</p>\n", "bases": "item, PyQt5.QtWidgets.QGraphicsEllipseItem"}, {"fullname": "Animation.Items_2d.circle.__init__", "modulename": "Animation.Items_2d", "qualname": "circle.__init__", "kind": "function", "doc": "<p>Circle item constructor</p>\n\n<p>Defines an ellipse, which inherits both from <code>QGraphicsEllipseItem</code> and\n<code>item</code>.</p>\n\n<p>Args:</p>\n\n<p>animation (<code>Animaton2d</code>): The animation container.</p>\n\n<p>name (str): The item's identifier, which should be unique. It is used as a\n    reference by <code>Animation2d</code>. This is the only mandatory argument.</p>\n\n<p>parent (<em>QGraphicsItem</em>): The parent <code>QGraphicsItem</code> in the <code>QGraphicsScene</code>.\n    Default is <code>None</code>, which means the parent is the <code>QGraphicsScene</code> itself.</p>\n\n<p>zvalue (float): Z-value (stack order) of the item.</p>\n\n<p>orientation (float): Orientation of the item (rad)</p>\n\n<p>position ([float,float]): Position of the <code>group</code>, <code>text</code>, \n    <code>circle</code>, and <code>rectangle</code> elements (scene units).</p>\n\n<p>colors ([<em>color</em>, <em>color</em>]): Fill and stroke colors for <code>circle</code>, \n    <code>ellipse</code>, <code>rectangle</code> or <code>polygon</code> elements.  Colors can be \n    whatever input of <code>QColor</code> (<em>e.g</em>: <code>darkCyan</code>, <code>#ff112233</code> or \n    (255, 0, 0, 127))</p>\n\n<p>linestyle (str): Stroke style (for <code>circle</code>, <code>ellipse</code>, <code>rectangle</code>\n    or <code>polygon</code>). Can have any value among <code>solid</code> (default), <code>dash</code>\n    or <code>--</code>, <code>dot</code> or <code>..</code> or <code>:</code>, <code>dashdot</code> or <code>-.</code>.</p>\n\n<p>clickable (bool): <em>TO DO</em></p>\n\n<p>movable (bool): If True, the element will be draggable. (default: <code>False</code>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">animation</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Animation.Items_2d.circle.colors", "modulename": "Animation.Items_2d", "qualname": "circle.colors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.circle.linestyle", "modulename": "Animation.Items_2d", "qualname": "circle.linestyle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.circle.thickness", "modulename": "Animation.Items_2d", "qualname": "circle.thickness", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.circle.span", "modulename": "Animation.Items_2d", "qualname": "circle.span", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.circle.radius", "modulename": "Animation.Items_2d", "qualname": "circle.radius", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.rectangle", "modulename": "Animation.Items_2d", "qualname": "rectangle", "kind": "class", "doc": "<p>Rectangle item</p>\n\n<p>The ellipse is defined by it's <code>ellipse.major</code> and <code>ellipse.minor</code>\naxis lenghts, and by its position and orientation. The position of the \ncenter is set by <code>item.position</code> and the orientation ... <em>TO WRITE</em>.</p>\n\n<p>Attributes:</p>\n\n<p>major (float): Length of the major axis.</p>\n\n<p>minor (float): Length of the minor axis.</p>\n", "bases": "item, PyQt5.QtWidgets.QGraphicsRectItem"}, {"fullname": "Animation.Items_2d.rectangle.__init__", "modulename": "Animation.Items_2d", "qualname": "rectangle.__init__", "kind": "function", "doc": "<p>Rectangle item constructor</p>\n\n<p>Defines an ellipse, which inherits both from <code>QGraphicsEllipseItem</code> and\n<code>item</code>.</p>\n\n<p>Args:</p>\n\n<p>animation (<code>Animaton2d</code>): The animation container.</p>\n\n<p>name (str): The item's identifier, which should be unique. It is used as a\n    reference by <code>Animation2d</code>. This is the only mandatory argument.</p>\n\n<p>parent (<em>QGraphicsItem</em>): The parent <code>QGraphicsItem</code> in the <code>QGraphicsScene</code>.\n    Default is <code>None</code>, which means the parent is the <code>QGraphicsScene</code> itself.</p>\n\n<p>zvalue (float): Z-value (stack order) of the item.</p>\n\n<p>orientation (float): Orientation of the item (rad)</p>\n\n<p>position ([float,float]): Position of the <code>group</code>, <code>text</code>, \n    <code>circle</code>, and <code>rectangle</code> elements (scene units).</p>\n\n<p>colors ([<em>color</em>, <em>color</em>]): Fill and stroke colors for <code>circle</code>, \n    <code>ellipse</code>, <code>rectangle</code> or <code>polygon</code> elements.  Colors can be \n    whatever input of <code>QColor</code> (<em>e.g</em>: <code>darkCyan</code>, <code>#ff112233</code> or \n    (255, 0, 0, 127))</p>\n\n<p>linestyle (str): Stroke style (for <code>circle</code>, <code>ellipse</code>, <code>rectangle</code>\n    or <code>polygon</code>). Can have any value among <code>solid</code> (default), <code>dash</code>\n    or <code>--</code>, <code>dot</code> or <code>..</code> or <code>:</code>, <code>dashdot</code> or <code>-.</code>.</p>\n\n<p>clickable (bool): <em>TO DO</em></p>\n\n<p>movable (bool): If True, the element will be draggable. (default: <code>False</code>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">animation</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Animation.Items_2d.rectangle.colors", "modulename": "Animation.Items_2d", "qualname": "rectangle.colors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.rectangle.linestyle", "modulename": "Animation.Items_2d", "qualname": "rectangle.linestyle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.rectangle.thickness", "modulename": "Animation.Items_2d", "qualname": "rectangle.thickness", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.rectangle.setGeometry", "modulename": "Animation.Items_2d", "qualname": "rectangle.setGeometry", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Items_2d.rectangle.width", "modulename": "Animation.Items_2d", "qualname": "rectangle.width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.rectangle.height", "modulename": "Animation.Items_2d", "qualname": "rectangle.height", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.rectangle.center", "modulename": "Animation.Items_2d", "qualname": "rectangle.center", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.line", "modulename": "Animation.Items_2d", "qualname": "line", "kind": "class", "doc": "<p>Line item</p>\n\n<p>The ellipse is defined by it's <code>ellipse.major</code> and <code>ellipse.minor</code>\naxis lenghts, and by its position and orientation. The position of the \ncenter is set by <code>item.position</code> and the orientation ... <em>TO WRITE</em>.</p>\n\n<p>Attributes:</p>\n\n<p>major (float): Length of the major axis.</p>\n\n<p>minor (float): Length of the minor axis.</p>\n", "bases": "item, PyQt5.QtWidgets.QGraphicsLineItem"}, {"fullname": "Animation.Items_2d.line.__init__", "modulename": "Animation.Items_2d", "qualname": "line.__init__", "kind": "function", "doc": "<p>Line item constructor</p>\n\n<p>Defines an ellipse, which inherits both from <code>QGraphicsEllipseItem</code> and\n<code>item</code>.</p>\n\n<p>Args:</p>\n\n<p>animation (<code>Animaton2d</code>): The animation container.</p>\n\n<p>name (str): The item's identifier, which should be unique. It is used as a\n    reference by <code>Animation2d</code>. This is the only mandatory argument.</p>\n\n<p>parent (<em>QGraphicsItem</em>): The parent <code>QGraphicsItem</code> in the <code>QGraphicsScene</code>.\n    Default is <code>None</code>, which means the parent is the <code>QGraphicsScene</code> itself.</p>\n\n<p>zvalue (float): Z-value (stack order) of the item.</p>\n\n<p>orientation (float): Orientation of the item (rad)</p>\n\n<p>position ([float,float]): Position of the <code>group</code>, <code>text</code>, \n    <code>circle</code>, and <code>rectangle</code> elements (scene units).</p>\n\n<p>colors ([<em>color</em>, <em>color</em>]): Fill and stroke colors for <code>circle</code>, \n    <code>ellipse</code>, <code>rectangle</code> or <code>polygon</code> elements.  Colors can be \n    whatever input of <code>QColor</code> (<em>e.g</em>: <code>darkCyan</code>, <code>#ff112233</code> or \n    (255, 0, 0, 127))</p>\n\n<p>linestyle (str): Stroke style (for <code>circle</code>, <code>ellipse</code>, <code>rectangle</code>\n    or <code>polygon</code>). Can have any value among <code>solid</code> (default), <code>dash</code>\n    or <code>--</code>, <code>dot</code> or <code>..</code> or <code>:</code>, <code>dashdot</code> or <code>-.</code>.</p>\n\n<p>clickable (bool): <em>TO DO</em></p>\n\n<p>movable (bool): If True, the element will be draggable. (default: <code>False</code>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">animation</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Animation.Items_2d.line.color", "modulename": "Animation.Items_2d", "qualname": "line.color", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.line.linestyle", "modulename": "Animation.Items_2d", "qualname": "line.linestyle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.line.thickness", "modulename": "Animation.Items_2d", "qualname": "line.thickness", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.line.points", "modulename": "Animation.Items_2d", "qualname": "line.points", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.polygon", "modulename": "Animation.Items_2d", "qualname": "polygon", "kind": "class", "doc": "<p>Polygon item</p>\n\n<p>The ellipse is defined by it's <code>ellipse.major</code> and <code>ellipse.minor</code>\naxis lenghts, and by its position and orientation. The position of the \ncenter is set by <code>item.position</code> and the orientation ... <em>TO WRITE</em>.</p>\n\n<p>Attributes:</p>\n\n<p>major (float): Length of the major axis.</p>\n\n<p>minor (float): Length of the minor axis.</p>\n", "bases": "item, PyQt5.QtWidgets.QGraphicsPolygonItem"}, {"fullname": "Animation.Items_2d.polygon.__init__", "modulename": "Animation.Items_2d", "qualname": "polygon.__init__", "kind": "function", "doc": "<p>Polygon item constructor</p>\n\n<p>Defines an ellipse, which inherits both from <code>QGraphicsEllipseItem</code> and\n<code>item</code>.</p>\n\n<p>Args:</p>\n\n<p>animation (<code>Animaton2d</code>): The animation container.</p>\n\n<p>name (str): The item's identifier, which should be unique. It is used as a\n    reference by <code>Animation2d</code>. This is the only mandatory argument.</p>\n\n<p>parent (<em>QGraphicsItem</em>): The parent <code>QGraphicsItem</code> in the <code>QGraphicsScene</code>.\n    Default is <code>None</code>, which means the parent is the <code>QGraphicsScene</code> itself.</p>\n\n<p>zvalue (float): Z-value (stack order) of the item.</p>\n\n<p>orientation (float): Orientation of the item (rad)</p>\n\n<p>position ([float,float]): Position of the <code>group</code>, <code>text</code>, \n    <code>circle</code>, and <code>rectangle</code> elements (scene units).</p>\n\n<p>colors ([<em>color</em>, <em>color</em>]): Fill and stroke colors for <code>circle</code>, \n    <code>ellipse</code>, <code>rectangle</code> or <code>polygon</code> elements.  Colors can be \n    whatever input of <code>QColor</code> (<em>e.g</em>: <code>darkCyan</code>, <code>#ff112233</code> or \n    (255, 0, 0, 127))</p>\n\n<p>linestyle (str): Stroke style (for <code>circle</code>, <code>ellipse</code>, <code>rectangle</code>\n    or <code>polygon</code>). Can have any value among <code>solid</code> (default), <code>dash</code>\n    or <code>--</code>, <code>dot</code> or <code>..</code> or <code>:</code>, <code>dashdot</code> or <code>-.</code>.</p>\n\n<p>clickable (bool): <em>TO DO</em></p>\n\n<p>movable (bool): If True, the element will be draggable. (default: <code>False</code>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">animation</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Animation.Items_2d.polygon.colors", "modulename": "Animation.Items_2d", "qualname": "polygon.colors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.polygon.linestyle", "modulename": "Animation.Items_2d", "qualname": "polygon.linestyle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.polygon.thickness", "modulename": "Animation.Items_2d", "qualname": "polygon.thickness", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.polygon.points", "modulename": "Animation.Items_2d", "qualname": "polygon.points", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.path", "modulename": "Animation.Items_2d", "qualname": "path", "kind": "class", "doc": "<p>Path item</p>\n\n<p>The ellipse is defined by it's <code>ellipse.major</code> and <code>ellipse.minor</code>\naxis lenghts, and by its position and orientation. The position of the \ncenter is set by <code>item.position</code> and the orientation ... <em>TO WRITE</em>.</p>\n\n<p>Attributes:</p>\n\n<p>major (float): Length of the major axis.</p>\n\n<p>minor (float): Length of the minor axis.</p>\n", "bases": "item, PyQt5.QtWidgets.QGraphicsPathItem"}, {"fullname": "Animation.Items_2d.path.__init__", "modulename": "Animation.Items_2d", "qualname": "path.__init__", "kind": "function", "doc": "<p>Path item constructor</p>\n\n<p>Defines an ellipse, which inherits both from <code>QGraphicsEllipseItem</code> and\n<code>item</code>.</p>\n\n<p>Args:</p>\n\n<p>animation (<code>Animaton2d</code>): The animation container.</p>\n\n<p>name (str): The item's identifier, which should be unique. It is used as a\n    reference by <code>Animation2d</code>. This is the only mandatory argument.</p>\n\n<p>parent (<em>QGraphicsItem</em>): The parent <code>QGraphicsItem</code> in the <code>QGraphicsScene</code>.\n    Default is <code>None</code>, which means the parent is the <code>QGraphicsScene</code> itself.</p>\n\n<p>zvalue (float): Z-value (stack order) of the item.</p>\n\n<p>orientation (float): Orientation of the item (rad)</p>\n\n<p>position ([float,float]): Position of the <code>group</code>, <code>text</code>, \n    <code>circle</code>, and <code>rectangle</code> elements (scene units).</p>\n\n<p>colors ([<em>color</em>, <em>color</em>]): Fill and stroke colors for <code>circle</code>, \n    <code>ellipse</code>, <code>rectangle</code> or <code>polygon</code> elements.  Colors can be \n    whatever input of <code>QColor</code> (<em>e.g</em>: <code>darkCyan</code>, <code>#ff112233</code> or \n    (255, 0, 0, 127))</p>\n\n<p>linestyle (str): Stroke style (for <code>circle</code>, <code>ellipse</code>, <code>rectangle</code>\n    or <code>polygon</code>). Can have any value among <code>solid</code> (default), <code>dash</code>\n    or <code>--</code>, <code>dot</code> or <code>..</code> or <code>:</code>, <code>dashdot</code> or <code>-.</code>.</p>\n\n<p>clickable (bool): <em>TO DO</em></p>\n\n<p>movable (bool): If True, the element will be draggable. (default: <code>False</code>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">animation</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Animation.Items_2d.path.colors", "modulename": "Animation.Items_2d", "qualname": "path.colors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.path.linestyle", "modulename": "Animation.Items_2d", "qualname": "path.linestyle", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.path.thickness", "modulename": "Animation.Items_2d", "qualname": "path.thickness", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Items_2d.path.points", "modulename": "Animation.Items_2d", "qualname": "path.points", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Window", "modulename": "Animation.Window", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Animation.Window.Window", "modulename": "Animation.Window", "qualname": "Window", "kind": "class", "doc": "<p>Animation-specific window.</p>\n\n<p>Subclass of Qwidget. Creates a new window containing an animation.</p>\n\n<p>Attributes:\n  title (string): Title of the window.\n  app (QApplication): Underlying QApplication.\n  anim (<code>Animation2d</code>): Animation to display.\n  layout (QGridLayout): The main layout.\n  information (<code>Information</code>): The object controlling the extra information displayed.\n  width (?): width of the window (in ?)\n  height (?): height of the window (in ?)\n  fpt (int): The windows' fps. Default: 25.\n  step (int):\n  dt (float):\n  timer (QTime)\n  allow_backward (bool):</p>\n", "bases": "PyQt5.QtWidgets.QWidget"}, {"fullname": "Animation.Window.Window.__init__", "modulename": "Animation.Window", "qualname": "Window.__init__", "kind": "function", "doc": "<p>Window constructor.</p>\n\n<p>In particular, it initializes the QApplication <code>app</code> and the animation to display <code>anim</code>.</p>\n\n<p>The dark style is automatically applied if the corresponding stylesheet is found.</p>\n\n<p>Args:\n  title (string): Window title. Default: 'Animation'.\n  display_information (bool): Determines if the extra information have to be displayed. Default: True.\n  autoplay (bool): Indicating if autoplay is on or off. Default: True.\n  dt (frames): time increment between two frames (in seconds). Default: None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;Animation&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">display_information</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">autoplay</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">&#39;dark&#39;</span></span>)</span>"}, {"fullname": "Animation.Window.Window.events", "modulename": "Animation.Window", "qualname": "Window.events", "kind": "function", "doc": "<p>A pyqtSignal object to manage external events.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Window.Window.app", "modulename": "Animation.Window", "qualname": "Window.app", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Window.Window.title", "modulename": "Animation.Window", "qualname": "Window.title", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Window.Window.layout", "modulename": "Animation.Window", "qualname": "Window.layout", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Window.Window.width", "modulename": "Animation.Window", "qualname": "Window.width", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Window.Window.height", "modulename": "Animation.Window", "qualname": "Window.height", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Window.Window.style", "modulename": "Animation.Window", "qualname": "Window.style", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Window.Window.fps", "modulename": "Animation.Window", "qualname": "Window.fps", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Window.Window.step", "modulename": "Animation.Window", "qualname": "Window.step", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Window.Window.dt", "modulename": "Animation.Window", "qualname": "Window.dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Window.Window.timer", "modulename": "Animation.Window", "qualname": "Window.timer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Window.Window.autoplay", "modulename": "Animation.Window", "qualname": "Window.autoplay", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Window.Window.allow_backward", "modulename": "Animation.Window", "qualname": "Window.allow_backward", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Window.Window.allow_negative_time", "modulename": "Animation.Window", "qualname": "Window.allow_negative_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Window.Window.play_forward", "modulename": "Animation.Window", "qualname": "Window.play_forward", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Window.Window.movieFile", "modulename": "Animation.Window", "qualname": "Window.movieFile", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Window.Window.movieWriter", "modulename": "Animation.Window", "qualname": "Window.movieWriter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Window.Window.movieWidth", "modulename": "Animation.Window", "qualname": "Window.movieWidth", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Window.Window.moviefps", "modulename": "Animation.Window", "qualname": "Window.moviefps", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Window.Window.keep_every", "modulename": "Animation.Window", "qualname": "Window.keep_every", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Animation.Window.Window.add", "modulename": "Animation.Window", "qualname": "Window.add", "kind": "function", "doc": "<p>Add a panel</p>\n\n<p>A panel can be a layout or an Animation2d object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">panel</span>, </span><span class=\"param\"><span class=\"n\">row</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">col</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Window.Window.show", "modulename": "Animation.Window", "qualname": "Window.show", "kind": "function", "doc": "<p>Creates the animation window</p>\n\n<p>Create the window to display the animation, defines the shortcuts,\ninitialize and start the animation.</p>\n\n<p>Args:\n  size (float): Height of the <code>QGraphicsView</code> widget, defining the \n    height of the window.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Window.Window.set_step", "modulename": "Animation.Window", "qualname": "Window.set_step", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">step</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Window.Window.capture", "modulename": "Animation.Window", "qualname": "Window.capture", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Window.Window.play_pause", "modulename": "Animation.Window", "qualname": "Window.play_pause", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Window.Window.increment", "modulename": "Animation.Window", "qualname": "Window.increment", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Window.Window.decrement", "modulename": "Animation.Window", "qualname": "Window.decrement", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Animation.Window.Window.close", "modulename": "Animation.Window", "qualname": "Window.close", "kind": "function", "doc": "<p>Stop the animation</p>\n\n<p>Stops the timer and close the window</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Style", "modulename": "Style", "kind": "module", "doc": "<p></p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();